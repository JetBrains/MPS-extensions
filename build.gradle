//will pull the groovy classes/types from nexus to the classpath
buildscript {
    repositories {
        maven { url 'https://projects.itemis.de/nexus/content/repositories/mbeddr' }
    }
    dependencies {
        classpath 'de.itemis.mps:mps-gradle-plugin:1.2+'
    }
}

plugins {
    id "co.riiid.gradle" version "0.4.2"
}

apply plugin: 'maven-publish'
apply plugin: 'base'



import de.itemis.mps.gradle.*

import java.time.LocalDateTime


wrapper {
    gradleVersion '5.2'
    distributionType 'all'
}

// detect if we are in a CI build
if (project.hasProperty("forceCI")) {
    ext.ciBuild = true
} else {
    //on teamcity we are in a CI build
    if (project.hasProperty("teamcity") && !project.hasProperty('mpsHomeDir')) {
        ext.ciBuild = true
    } else {
        ext.ciBuild = false
    }
}

// comprehensible error message if not running java 8
//if(JavaVersion.current() != JavaVersion.VERSION_1_8){
//    throw new GradleException("This build script requires java " + JavaVersion.VERSION_1_8 + ", but you are currently using " + JavaVersion.current())
//}
// Detect jdk location, required to start ant with JDK on classpath otherwise javac and tests will fail
def java_home = System.properties['java.home']
def jdk_home = java_home
if (!file("$jdk_home/lib").exists()) {
    throw new GradleException("Was not able to locate jdk home folder. Use 'jdk_home' project variable to specify JDK location explicitly. Current JAVA_HOME is: $java_home")
}
ext.jdk_home = jdk_home

// Default repository credentials
if (!project.hasProperty('nexusUsername')) {
    ext.nexusUsername = ''
    ext.nexusPassword = ''
}
logger.info 'Repository username: {}', project.nexusUsername

ext.dependencyRepositories = [
        'https://projects.itemis.de/nexus/content/repositories/mbeddr',
        'https://projects.itemis.de/nexus/content/repositories/mbeddr_snapshots',
]
// Dependency versions

ext.mpsMajor = '2019.2'
ext.mpsMinor = ''
// e.g. Beta, EAP, RC
ext.mpsReleaseType = ''

def appendOpt = { str,pre -> !str.isEmpty() ? "${pre}${str}" : "" }
ext.mpsVersion =  "$mpsMajor" + appendOpt(mpsMinor, '.') + appendOpt(mpsReleaseType, '-')


def minor = '2'
def major = '2019'

if (ciBuild) {
    String branch = GitBasedVersioning.gitBranch

    def buildNumber = System.env.BUILD_NUMBER.toInteger()
    if (branch.startsWith("maintenance") || branch.startsWith("mps")) {
        version = "$major.$minor.$buildNumber.${GitBasedVersioning.gitShortCommitHash}"
    } else {
        version = GitBasedVersioning.getVersionWithCount(major, minor, buildNumber)
    }

    println "##teamcity[buildNumber '${version}']"
} else {
    println "Local build detected, version will be SNAPSHOT"
    version = "1.0-SNAPSHOT"
}

def userHome = System.properties['user.home']
def mpsPluginsDirPattern
if (System.properties['os.name'].toLowerCase().contains('mac')) {
    mpsPluginsDirPattern = "$userHome/Library/Application Support/%s"
} else {
    mpsPluginsDirPattern = "$userHome/.%s/config/plugins"
}

if (project.hasProperty("MPS_PATHS_SELECTOR")) {
    ext.mpsPluginsDir = sprintf(mpsPluginsDirPattern, project.getProperty("MPS_PATHS_SELECTOR"))
} else {
    ext.mpsPluginsDir = sprintf(mpsPluginsDirPattern, "MPS$mpsMajor")
}

ext.releaseRepository = 'https://projects.itemis.de/nexus/content/repositories/mbeddr'
ext.snapshotRepository = 'https://projects.itemis.de/nexus/content/repositories/mbeddr_snapshots'
ext.publishingRepository = version.toString().endsWith("-SNAPSHOT") ? snapshotRepository : releaseRepository


configurations {
    mps
}

dependencies {
    mps "com.jetbrains:mps:$mpsVersion"
}

repositories {
    mavenLocal()
    for (repoUrl in project.dependencyRepositories) {
        maven {
            url repoUrl
        }
    }
}

ext.skipResolveMps = project.hasProperty('mpsHomeDir')
ext.mpsHomeDir = rootProject.file(project.findProperty('mpsHomeDir') ?: "$buildDir/mps")

if (project.skipResolveMps) {
    task resolveMps {
        doLast {
            logger.info "MPS resolution skipped"
            logger.info "MPS home: " + mpsHomeDir.getAbsolutePath()
        }
    }
} else {
    task resolveMps(type: Copy) {
        dependsOn configurations.mps
        from {
            configurations.mps.resolve().collect { zipTree(it) }
        }
        into mpsHomeDir
    }
}

// Ant support
configurations {
    ant_lib
}

dependencies {
    ant_lib "org.apache.ant:ant-junit:1.10.1"
}

ext.buildScriptClasspath = project.configurations.ant_lib.fileCollection({
    true
})

def artifactsDir = new File(rootDir, 'artifacts')


ext.mps_home = '-Dmps.home=' + mpsHomeDir.getAbsolutePath()
ext.build_dir = '-Dbuild.dir=' + file(rootProject.projectDir.absolutePath).getAbsolutePath()
ext.artifacts_dir = '-Dartifacts.root=' + artifactsDir
ext.pluginVersion = "-DversionNumber=" + version
ext.buildDate = "-DbuildDate=" + new Date().toString()
ext.extensions_home = '-Dextensions.home=' + rootDir
ext.skipUnmodifiedModels = "-Dmps.generator.skipUnmodifiedModels=true" //incremental build support

// ___________________ utilities ___________________
File scriptFile(String relativePath) {
    new File("$rootDir/build/generated/$relativePath")
}

def defaultScriptArgs = [mps_home, build_dir, artifacts_dir, ext.buildDate, ext.pluginVersion, ext.skipUnmodifiedModels]

// enables https://github.com/mbeddr/mps-gradle-plugin#providing-global-defaults
ext["itemis.mps.gradle.ant.defaultScriptArgs"] = defaultScriptArgs
ext["itemis.mps.gradle.ant.defaultScriptClasspath"] = buildScriptClasspath


task build_allScripts(type: BuildLanguages, dependsOn: [resolveMps]) {
    script "$rootDir/scripts/build.xml"
}

task build_languages(type: BuildLanguages, dependsOn: [build_allScripts]) {
    script scriptFile('languages/build.xml')
}

task run_tests(type: TestLanguages, dependsOn: build_languages) {
    description "Will execute all tests from command line"
    script scriptFile('tests/build.xml')
}

task install_nativelibs(type: Copy, dependsOn: build_languages) {
    from "$rootDir/artifacts/de.itemis.mps.extensions/"
    include "de.itemis.mps.nativelibs.loader/"
    into "$mpsPluginsDir"
}


task install(dependsOn: install_nativelibs) {
    description "Install the required plugins into the MPS plugin repository"
    group "Build Setup"
    doFirst {
        // check parent gradle file for definition of the variables
        println "Installing required mbeddr plugins to '$mpsPluginsDir'"
        if (!project.hasProperty("MPS_PATHS_SELECTOR")) {
            println "To change 'MPS<>' part, pass MPS_PATHS_SELECTOR property to gradle with -PMPS_PATHS_SELECTOR=<custom path selector>"
            println "The path selector only contains the the actual selector for instance \"MPS2017.3\" not the full qualifies path to the user plugin directory."
        }
    }
}

//

// Ant <junit> task support
repositories {
    mavenCentral()
}
configurations {
    junitAnt
}
dependencies {
    junitAnt 'junit:junit:4.12'
    junitAnt('org.apache.ant:ant-junit:1.9.7') {
        transitive = false
    }
    junitAnt('org.apache.ant:ant-junit4:1.9.7') {
        transitive = false
    }
}

task packageAllScripts(type: Zip, dependsOn: run_tests) {
    baseName 'de.itemis.mps.extensions.allScripts'
    from artifactsDir
    include 'de.itemis.mps.extensions.allScripts/**'
}

task packageExtensions(type: Zip, dependsOn: run_tests) {
    baseName 'de.itemis.mps.extensions'
    from artifactsDir
    include 'de.itemis.mps.extensions/**'
}

task cleanMps(type: Delete) {
    delete fileTree(dir: projectDir, include: ["**/classes_gen/**", "**/source_gen/**", "**/source_gen.caches/**", "tmp/**", "artifacts/**"])
}

clean.dependsOn cleanMps

publishing {
    repositories {
        maven {
            url project.publishingRepository
            if (project.hasProperty('nexusUsername')) {
                credentials {
                    username project.nexusUsername
                    password project.nexusPassword
                }
            }
        }
    }
    publications {
        extensions(MavenPublication) {
            groupId 'de.itemis.mps'
            artifactId 'extensions'
            artifact packageExtensions
            //Pom.withProvidedDep pom, configurations.mps
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.mps.resolvedConfiguration.firstLevelModuleDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.moduleGroup)
                    dependencyNode.appendNode('artifactId', it.moduleName)
                    dependencyNode.appendNode('version', it.moduleVersion)
                    dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
                    dependencyNode.appendNode('scope', 'provided')
                }
            }
        }
    }
}

task pipInstall(type: Exec) {
    inputs.file("requirements.txt")
    commandLine "pip", "install", "-r", "requirements.txt"
}

task previewDocs(type: Exec, dependsOn: pipInstall) {
    commandLine "mkdocs", "serve"
}

task deployDocs(type: Exec, dependsOn: pipInstall) {
    commandLine "git", "remote", "add",  "gh-pages", "https://${System.properties["system.github.token"]}@github.com/JetBrains/MPS-extensions.git"
    commandLine "mkdocs", "gh-deploy", "--clean", "-r", "gh-pages", "--force"
}

defaultTasks 'build_languages'
task test(dependsOn: run_tests)

build_languages.mustRunAfter clean

task rebuild(dependsOn:[clean, build_languages])

def releaseNotes
def releaseName
def releaseTagName

if (rootProject.hasProperty("nightly_build")) {
    releaseName = 'Nighly Build ' + version
    releaseTagName = 'nightly-' + version
    releaseNotes = """Automated Nighly build from ${LocalDateTime.now() as String}."""
} else {
    releaseNotes = rootProject.findProperty("releaseNotes")
    releaseTagName = 'release-' + version
    releaseName = version
}


github {
    owner = 'jetbrains'
    repo = 'MPS-extensions'
    token = rootProject.findProperty("github.token") ?: "empty"
    tagName = releaseTagName
    targetCommitish = GitBasedVersioning.getGitCommitHash()
    name = releaseName
    body = releaseNotes
    prerelease = rootProject.hasProperty("nightly_build")
    assets = packageExtensions.outputs.files.files.collect {it.path}
}

githubRelease.dependsOn packageExtensions
